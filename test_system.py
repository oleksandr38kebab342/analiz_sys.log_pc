#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
–õ–æ–∫–∞–ª—å–Ω–æ–≥–æ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤
"""

import sys
import os
import platform
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É –≤—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤"""
    print("üß™ –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤")
    print("-" * 40)
    
    modules = [
        ('log_analyzer.utils', '–£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó'),
        ('log_analyzer.log_parser', '–ü–∞—Ä—Å–µ—Ä –ª–æ–≥—ñ–≤'),
        ('log_analyzer.log_analyzer', '–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –ª–æ–≥—ñ–≤'),
        ('log_analyzer.report_generator', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤')
    ]
    
    system = platform.system().lower()
    if system == 'windows':
        modules.append(('log_analyzer.windows_log_reader', '–ß–∏—Ç–∞—á Windows –ª–æ–≥—ñ–≤'))
    else:
        modules.append(('log_analyzer.linux_log_reader', '–ß–∏—Ç–∞—á Linux –ª–æ–≥—ñ–≤'))
    
    all_passed = True
    
    for module_name, description in modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {description}: OK")
        except ImportError as e:
            print(f"‚ùå {description}: –ü–û–ú–ò–õ–ö–ê - {e}")
            all_passed = False
        except Exception as e:
            print(f"‚ö†Ô∏è  {description}: –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø - {e}")
    
    return all_passed

def test_dependencies():
    """–¢–µ—Å—Ç –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")
    print("-" * 40)
    
    dependencies = {
        'docx': 'python-docx (–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤)',
    }
    
    system = platform.system().lower()
    if system == 'windows':
        dependencies['win32evtlog'] = 'pywin32 (–¥–ª—è Windows Event Log)'
    
    all_passed = True
    
    for dep, description in dependencies.items():
        try:
            __import__(dep)
            print(f"‚úÖ {description}: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except ImportError:
            print(f"‚ùå {description}: –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            all_passed = False
    
    return all_passed

def test_permissions():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É")
    print("-" * 40)
    
    try:
        from log_analyzer.utils import check_admin_rights
        
        has_admin = check_admin_rights()
        if has_admin:
            print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: —î")
        else:
            print("‚ö†Ô∏è  –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –Ω–µ–º–∞—î")
            print("   –î–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ª–æ–≥—ñ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–∞–ø—É—Å–∫ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

def test_log_reader():
    """–¢–µ—Å—Ç —á–∏—Ç–∞—á–∞ –ª–æ–≥—ñ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —á–∏—Ç–∞—á–∞ –ª–æ–≥—ñ–≤")
    print("-" * 40)
    
    system = platform.system().lower()
    
    try:
        if system == 'windows':
            from log_analyzer.windows_log_reader import WindowsLogReader
            reader = WindowsLogReader(['System'])
            print("‚úÖ Windows —á–∏—Ç–∞—á –ª–æ–≥—ñ–≤: —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            try:
                sources = reader.get_available_log_sources()
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –ª–æ–≥—ñ–≤: {len(sources)}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª: {e}")
        
        else:
            from log_analyzer.linux_log_reader import LinuxLogReader
            reader = LinuxLogReader()
            print("‚úÖ Linux —á–∏—Ç–∞—á –ª–æ–≥—ñ–≤: —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
            try:
                files = reader.get_available_log_files()
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤: {len(files)}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Ç–∞—á–∞ –ª–æ–≥—ñ–≤: {e}")
        return False

def test_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –ª–æ–≥—ñ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –ª–æ–≥—ñ–≤")
    print("-" * 40)
    
    try:
        from log_analyzer.log_parser import LogParser
        
        parser = LogParser()
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –ª–æ–≥—ñ–≤: —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –∑ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        test_logs = [
            {
                'timestamp': datetime.now(),
                'level': 'ERROR',
                'source': 'TestApp',
                'message': 'Test error message'
            },
            {
                'timestamp': datetime.now(),
                'level': 'INFO',
                'source': 'TestApp',
                'message': 'Test info message'
            }
        ]
        
        parsed = parser.parse_logs(test_logs)
        print(f"‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É: –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(parsed)} –∑–∞–ø–∏—Å—ñ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç 6: –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –ª–æ–≥—ñ–≤")
    print("-" * 40)
    
    try:
        from log_analyzer.log_analyzer import LogAnalyzer
        
        analyzer = LogAnalyzer()
        print("‚úÖ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –ª–æ–≥—ñ–≤: —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –∑ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        test_logs = [
            {
                'timestamp': datetime.now(),
                'level': 'ERROR',
                'source': 'TestApp',
                'message': 'Test error message',
                'message_hash': 'test_hash_1',
                'error_type': '–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞',
                'severity_score': 70
            }
        ]
        
        results = analyzer.analyze(test_logs, top_n=5)
        print("‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É: –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_report_generator():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–≤—ñ—Ç—ñ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 7: –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–≤—ñ—Ç—ñ–≤")
    print("-" * 40)
    
    try:
        from log_analyzer.report_generator import ReportGenerator
        
        generator = ReportGenerator()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤: —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É python-docx: {e}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-docx")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–ê–¢–û–†–ê –°–ò–°–¢–ï–ú–ù–ò–• –ñ–£–†–ù–ê–õ–Ü–í")
    print("=" * 60)
    print(f"üñ•Ô∏è  –û–°: {platform.system()} {platform.release()}")
    print(f"üêç Python: {sys.version}")
    print("=" * 60)
    
    tests = [
        test_imports,
        test_dependencies,
        test_permissions,
        test_log_reader,
        test_parser,
        test_analyzer,
        test_report_generator
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ {test_func.__name__}: {e}")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: {passed}/{total}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
        print("üöÄ –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python main.py")
    elif passed >= total * 0.7:
        print("\n‚ö†Ô∏è  –ë–Ü–õ–¨–®–Ü–°–¢–¨ –¢–ï–°–¢–Ü–í –ü–†–û–ô–î–ï–ù–û. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∞ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏.")
        print("üí° –£—Å—É–Ω—å—Ç–µ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.")
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò. –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è.")
        print("üîß –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
