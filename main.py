#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–õ–æ–∫–∞–ª—å–Ω–∏–π –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –∑–±—ñ—Ä, –ø–∞—Ä—Å–∏–Ω–≥, –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –∑–∞ –¥–∞–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∂—É—Ä–Ω–∞–ª—ñ–≤ –ø–æ–º–∏–ª–æ–∫
"""

import os
import sys
import platform
import argparse
from datetime import datetime, timedelta
from pathlib import Path

from log_analyzer.windows_log_reader import WindowsLogReader
from log_analyzer.linux_log_reader import LinuxLogReader
from log_analyzer.log_parser import LogParser
from log_analyzer.log_analyzer import LogAnalyzer
from log_analyzer.report_generator import ReportGenerator
from log_analyzer.utils import setup_logging, check_admin_rights

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logging()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(description='–õ–æ–∫–∞–ª—å–Ω–∏–π –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤')
    parser.add_argument('--output', '-o', type=str, default='–∑–≤—ñ—Ç_—Å–∏—Å—Ç–µ–º–Ω–∏—Ö_–∂—É—Ä–Ω–∞–ª—ñ–≤.docx',
                      help='–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑–≤—ñ—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: –∑–≤—ñ—Ç_—Å–∏—Å—Ç–µ–º–Ω–∏—Ö_–∂—É—Ä–Ω–∞–ª—ñ–≤.docx)')
    parser.add_argument('--days', '-d', type=int, default=7,
                      help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 7)')
    parser.add_argument('--top', '-t', type=int, default=10,
                      help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 10)')
    
    args = parser.parse_args()
    
    print("üîç –õ–æ–∫–∞–ª—å–Ω–∏–π –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not check_admin_rights():
        print("‚ö†Ô∏è  –£–≤–∞–≥–∞: –î–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∂—É—Ä–Ω–∞–ª—ñ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–∞–ø—É—Å–∫ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –ø—ñ–¥–≤–∏—â–µ–Ω–∏—Ö –ø—Ä–∞–≤? (y/n): ")
        if response.lower() != 'y':
            print("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤–∏–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —á–∏—Ç–∞—á–∞ –ª–æ–≥—ñ–≤
    system = platform.system().lower()
    print(f"üñ•Ô∏è  –í–∏—è–≤–ª–µ–Ω–∞ –û–°: {platform.system()} {platform.release()}")
    
    try:
        if system == 'windows':
            log_reader = WindowsLogReader()
        elif system == 'linux':
            log_reader = LinuxLogReader()
        else:
            print(f"‚ùå –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ {system} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è")
            print("–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –û–°: Windows, Linux")
            return
        
        # –ó–±—ñ—Ä –ª–æ–≥—ñ–≤
        print(f"üìñ –ó–±–∏—Ä–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {args.days} –¥–Ω—ñ–≤...")
        start_date = datetime.now() - timedelta(days=args.days)
        logs = log_reader.read_logs(start_date)
        
        if not logs:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –ª–æ–≥–∏ –∞–±–æ –ª–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return
        
        print(f"‚úÖ –ó—ñ–±—Ä–∞–Ω–æ {len(logs)} –∑–∞–ø–∏—Å—ñ–≤ –ª–æ–≥—ñ–≤")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥—ñ–≤
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ª–æ–≥—ñ–≤...")
        parser_obj = LogParser()
        parsed_logs = parser_obj.parse_logs(logs)
        
        if not parsed_logs:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –ª–æ–≥–∏")
            return
        
        print(f"‚úÖ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_logs)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –ê–Ω–∞–ª—ñ–∑ –ª–æ–≥—ñ–≤
        print("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö...")
        analyzer = LogAnalyzer()
        analysis_results = analyzer.analyze(parsed_logs, top_n=args.top)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
        print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É...")
        report_generator = ReportGenerator()
        output_path = Path(args.output)
        
        report_generator.generate_report(
            analysis_results=analysis_results,
            total_logs=len(logs),
            parsed_logs=len(parsed_logs),
            days_analyzed=args.days,
            output_path=output_path
        )
        
        print(f"‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {output_path.absolute()}")
        print(f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {output_path.stat().st_size / 1024:.1f} KB")
        
    except KeyboardInterrupt:
        print("\n‚õî –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print("–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --debug")
        return 1
    
    print("\nüéâ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    return 0

if __name__ == "__main__":
    exit(main())
