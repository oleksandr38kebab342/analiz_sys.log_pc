#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ-—Ä–µ–∂–∏–º –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ª–æ–≥—ñ–≤
"""

import sys
import os
from datetime import datetime, timedelta
import random
from pathlib import Path

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from log_analyzer.log_parser import LogParser
from log_analyzer.log_analyzer import LogAnalyzer
from log_analyzer.report_generator import ReportGenerator

def generate_demo_logs(days: int = 7, logs_per_day: int = 100) -> list:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –ª–æ–≥—ñ–≤
    
    Args:
        days: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
        logs_per_day: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤ –Ω–∞ –¥–µ–Ω—å
        
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –ª–æ–≥—ñ–≤
    """
    print(f"üé≠ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {days * logs_per_day} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –ª–æ–≥—ñ–≤...")
    
    # –®–∞–±–ª–æ–Ω–∏ –ø–æ–º–∏–ª–æ–∫
    error_templates = [
        {
            'level': 'ERROR',
            'source': 'DatabaseService',
            'message': 'Connection timeout to database server',
            'type': '–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞'
        },
        {
            'level': 'CRITICAL',
            'source': 'DiskManager',
            'message': 'Disk space critically low: 98% full',
            'type': '–ü–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏'
        },
        {
            'level': 'ERROR',
            'source': 'AuthenticationService',
            'message': 'Failed login attempt for user admin',
            'type': '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'
        },
        {
            'level': 'WARNING',
            'source': 'MemoryManager',
            'message': 'High memory usage detected: 85%',
            'type': '–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞'
        },
        {
            'level': 'ERROR',
            'source': 'NetworkAdapter',
            'message': 'Network interface eth0 is down',
            'type': '–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞'
        },
        {
            'level': 'CRITICAL',
            'source': 'SecurityService',
            'message': 'Multiple failed authentication attempts detected',
            'type': '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'
        },
        {
            'level': 'ERROR',
            'source': 'ApplicationServer',
            'message': 'Service crashed with exit code 1',
            'type': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏'
        },
        {
            'level': 'WARNING',
            'source': 'UpdateService',
            'message': 'Update server unreachable',
            'type': '–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞'
        },
        {
            'level': 'ERROR',
            'source': 'FileSystem',
            'message': 'Permission denied accessing /var/log/system.log',
            'type': '–ü–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏'
        },
        {
            'level': 'INFO',
            'source': 'SystemMonitor',
            'message': 'System health check completed successfully',
            'type': '–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'
        }
    ]
    
    logs = []
    start_date = datetime.now() - timedelta(days=days)
    
    for day in range(days):
        current_date = start_date + timedelta(days=day)
        
        # –ë—ñ–ª—å—à–µ –ø–æ–º–∏–ª–æ–∫ —É —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ (9-17)
        for hour in range(24):
            if 9 <= hour <= 17:
                hour_logs = logs_per_day // 24 * 2  # –ü–æ–¥–≤—ñ–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            else:
                hour_logs = logs_per_day // 24 // 2  # –ü–æ–ª–æ–≤–∏–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            
            for _ in range(max(1, hour_logs)):
                template = random.choice(error_templates)
                
                # –í–∞—Ä—ñ–∞—Ü—ñ—ó –ø–æ–º–∏–ª–æ–∫
                variations = {
                    'Connection timeout': ['Connection timeout', 'Connection failed', 'Connection refused'],
                    'Failed login': ['Failed login attempt', 'Invalid credentials', 'Authentication failed'],
                    'disk space': ['Disk space low', 'Storage full', 'No space left'],
                    'Service crashed': ['Service crashed', 'Application terminated', 'Process died']
                }
                
                message = template['message']
                for key, variants in variations.items():
                    if key.lower() in message.lower():
                        message = random.choice(variants) + message[len(key):]
                        break
                
                log_entry = {
                    'timestamp': current_date.replace(
                        hour=hour,
                        minute=random.randint(0, 59),
                        second=random.randint(0, 59)
                    ),
                    'level': template['level'],
                    'source': template['source'],
                    'message': message,
                    'hostname': random.choice(['server-01', 'server-02', 'workstation-05']),
                    'pid': random.randint(1000, 9999),
                    'log_source': 'demo'
                }
                
                logs.append(log_entry)
    
    return logs

def run_demo_analysis():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
    print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ò–ô –†–ï–ñ–ò–ú")
    print("–õ–æ–∫–∞–ª—å–Ω–æ–≥–æ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤")
    print("=" * 60)
    
    print("üìù –¶–µ–π —Ä–µ–∂–∏–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —à—Ç—É—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ")
    print("   –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞")
    print()
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–º–æ-–ª–æ–≥—ñ–≤
        demo_logs = generate_demo_logs(days=7, logs_per_day=50)
        print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(demo_logs)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥—ñ–≤
        print("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ª–æ–≥—ñ–≤...")
        parser = LogParser()
        parsed_logs = parser.parse_logs(demo_logs)
        print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {len(parsed_logs)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –ê–Ω–∞–ª—ñ–∑
        print("\nüìä –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É...")
        analyzer = LogAnalyzer()
        analysis_results = analyzer.analyze(parsed_logs, top_n=10)
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print("\nüìã –ü–û–ü–ï–†–ï–î–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        print("-" * 40)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏
        level_stats = analysis_results.get('level_stats', {})
        by_level = level_stats.get('by_level', {})
        
        for level in ['CRITICAL', 'ERROR', 'WARNING', 'INFO']:
            if level in by_level:
                count = by_level[level]['count']
                percentage = by_level[level]['percentage']
                print(f"{level:>8}: {count:>3} ({percentage:>5.1f}%)")
        
        # –¢–æ–ø –ø–æ–º–∏–ª–æ–∫
        top_errors = analysis_results.get('error_stats', {}).get('top_errors', [])
        if top_errors:
            print(f"\nüîù –¢–û–ü-{min(5, len(top_errors))} –ü–û–ú–ò–õ–û–ö:")
            for i, error in enumerate(top_errors[:5], 1):
                print(f"{i}. {error['error_type']}: {error['count']} —Ä–∞–∑—ñ–≤")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
        print(f"\nüìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ-–∑–≤—ñ—Ç—É...")
        report_generator = ReportGenerator()
        output_path = Path("–¥–µ–º–æ_–∑–≤—ñ—Ç_—Å–∏—Å—Ç–µ–º–Ω–∏—Ö_–∂—É—Ä–Ω–∞–ª—ñ–≤.docx")
        
        success = report_generator.generate_report(
            analysis_results=analysis_results,
            total_logs=len(demo_logs),
            parsed_logs=len(parsed_logs),
            days_analyzed=7,
            output_path=output_path
        )
        
        if success:
            print(f"‚úÖ –î–µ–º–æ-–∑–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {output_path.absolute()}")
            print(f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {output_path.stat().st_size / 1024:.1f} KB")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É")
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print("üí° –î–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–∞–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤ –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python main.py")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        return False
    
    return True

def interactive_demo():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è"""
    print("üéÆ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø")
    print("=" * 40)
    
    print("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó:")
    
    try:
        days = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (1-30) [7]: ") or "7")
        days = max(1, min(30, days))
    except ValueError:
        days = 7
    
    try:
        logs_per_day = int(input("–õ–æ–≥—ñ–≤ –Ω–∞ –¥–µ–Ω—å (10-200) [50]: ") or "50")
        logs_per_day = max(10, min(200, logs_per_day))
    except ValueError:
        logs_per_day = 50
    
    print(f"\nüé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó:")
    print(f"   –ü–µ—Ä—ñ–æ–¥: {days} –¥–Ω—ñ–≤")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: ~{logs_per_day} –ª–æ–≥—ñ–≤/–¥–µ–Ω—å")
    print(f"   –ó–∞–≥–∞–ª–æ–º: ~{days * logs_per_day} –∑–∞–ø–∏—Å—ñ–≤")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    return run_demo_analysis()

if __name__ == "__main__":
    print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ò–ô –†–ï–ñ–ò–ú")
    print("=" * 60)
    
    mode = input("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:\n1 - –®–≤–∏–¥–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è\n2 - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è\n–í–∏–±—ñ—Ä (1/2): ").strip()
    
    if mode == "2":
        success = interactive_demo()
    else:
        success = run_demo_analysis()
    
    sys.exit(0 if success else 1)
