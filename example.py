#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–∏
"""

import sys
import os
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from log_analyzer.utils import setup_logging
from log_analyzer.windows_log_reader import WindowsLogReader
from log_analyzer.linux_log_reader import LinuxLogReader
from log_analyzer.log_parser import LogParser
from log_analyzer.log_analyzer import LogAnalyzer
from log_analyzer.report_generator import ReportGenerator

def example_quick_analysis():
    """–ü—Ä–∏–∫–ª–∞–¥ —à–≤–∏–¥–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Å–∏—Å—Ç–µ–º–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É"""
    print("üîç –ü—Ä–∏–∫–ª–∞–¥: –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É")
    print("=" * 50)
    
    setup_logging()
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –û–° —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Ç–∞—á–∞
    import platform
    if platform.system().lower() == 'windows':
        reader = WindowsLogReader(['System', 'Application'])  # –¢—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞
    else:
        reader = LinuxLogReader(['/var/log/syslog'])  # –¢—ñ–ª—å–∫–∏ syslog
    
    # –ó–±—ñ—Ä –ª–æ–≥—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É
    start_date = datetime.now() - timedelta(days=1)
    print(f"üìñ –ó–±—ñ—Ä –ª–æ–≥—ñ–≤ –∑ {start_date.strftime('%d.%m.%Y %H:%M')}...")
    
    try:
        logs = reader.read_logs(start_date)
        print(f"‚úÖ –ó—ñ–±—Ä–∞–Ω–æ {len(logs)} –∑–∞–ø–∏—Å—ñ–≤")
        
        if not logs:
            print("‚ùå –õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–º–∏–ª–∫–∏
        parser = LogParser(filter_levels=['ERROR', 'CRITICAL'])
        parsed_logs = parser.parse_logs(logs)
        print(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(parsed_logs)} –ø–æ–º–∏–ª–æ–∫")
        
        # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑
        analyzer = LogAnalyzer()
        results = analyzer.analyze(parsed_logs, top_n=5)
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ê–ù–ê–õ–Ü–ó–£:")
        print("-" * 30)
        
        level_stats = results.get('level_stats', {})
        if level_stats:
            by_level = level_stats.get('by_level', {})
            print(f"–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏: {by_level.get('CRITICAL', {}).get('count', 0)}")
            print(f"–ó–≤–∏—á–∞–π–Ω—ñ –ø–æ–º–∏–ª–∫–∏: {by_level.get('ERROR', {}).get('count', 0)}")
            print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {by_level.get('WARNING', {}).get('count', 0)}")
        
        top_errors = results.get('error_stats', {}).get('top_errors', [])
        if top_errors:
            print(f"\nüîù –¢–û–ü-3 –ü–†–û–ë–õ–ï–ú–ò:")
            for i, error in enumerate(top_errors[:3], 1):
                print(f"{i}. {error['error_type']}: {error['count']} —Ä–∞–∑—ñ–≤")
        
        print("\n‚úÖ –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def example_custom_filter():
    """–ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ª–æ–≥—ñ–≤"""
    print("\nüîç –ü—Ä–∏–∫–ª–∞–¥: –ü–æ—à—É–∫ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    custom_parser = LogParser(
        filter_levels=['ERROR', 'CRITICAL', 'WARNING'],
        include_keywords=['failed', 'timeout', 'connection', 'denied'],
        exclude_keywords=['debug', 'trace']
    )
    
    print("üîß –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É –º–µ—Ä–µ–∂–µ–≤–∏—Ö —Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫")
    print("–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: failed, timeout, connection, denied")

def example_report_customization():
    """–ü—Ä–∏–∫–ª–∞–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É"""
    print("\nüìÑ –ü—Ä–∏–∫–ª–∞–¥: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–≤—ñ—Ç—ñ–≤
    try:
        report_gen = ReportGenerator()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∏–π")
        print("üìã –ó–≤—ñ—Ç –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏:")
        print("  - –¢–∏—Ç—É–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É")
        print("  - –ó–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  - –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫")
        print("  - –ß–∞—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑")
        print("  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é")
        
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install python-docx")

def example_check_system():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏"""
    print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏")
    print("=" * 50)
    
    import platform
    system = platform.system()
    print(f"üñ•Ô∏è  –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system} {platform.release()}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –≤–µ—Ä—Å—ñ—ó
    print(f"üêç Python –≤–µ—Ä—Å—ñ—è: {sys.version}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    dependencies = {
        'python-docx': '–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤',
        'pywin32': '–¥–ª—è Windows Event Log (—Ç—ñ–ª—å–∫–∏ Windows)',
    }
    
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:")
    for dep, description in dependencies.items():
        try:
            if dep == 'pywin32' and system != 'Windows':
                print(f"‚è≠Ô∏è  {dep}: –ø—Ä–æ–ø—É—â–µ–Ω–æ ({description})")
                continue
                
            __import__(dep.replace('-', '_'))
            print(f"‚úÖ {dep}: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except ImportError:
            print(f"‚ùå {dep}: –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - {description}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    from log_analyzer.utils import check_admin_rights
    
    if check_admin_rights():
        print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: —î")
    else:
        print("‚ö†Ô∏è  –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –Ω–µ–º–∞—î (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É)")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏"""
    print("üöÄ –ü–†–ò–ö–õ–ê–î–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø")
    print("üîç –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –°–∏—Å—Ç–µ–º–Ω–∏—Ö –ñ—É—Ä–Ω–∞–ª—ñ–≤")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏
    example_check_system()
    
    # –ü—Ä–∏–∫–ª–∞–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
    example_report_customization()
    
    # –ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    example_custom_filter()
    
    # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≥–æ–¥–∏—Ç—å—Å—è)
    print("\n" + "=" * 60)
    response = input("ü§î –í–∏–∫–æ–Ω–∞—Ç–∏ —à–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏—Å—Ç–µ–º–∏? (y/n): ")
    if response.lower() == 'y':
        example_quick_analysis()
    
    print("\nüéâ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python main.py")

if __name__ == "__main__":
    main()
